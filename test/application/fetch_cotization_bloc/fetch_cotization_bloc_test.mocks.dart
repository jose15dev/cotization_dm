// Mocks generated by Mockito 5.3.2 from annotations
// in cotizacion_dm/test/application/fetch_cotization_bloc/fetch_cotization_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cotizacion_dm/core/domain/domain.dart' as _i2;
import 'package:cotizacion_dm/core/infrastructure/configuration/cache/cotization/cache_cotization_service.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCotization_0 extends _i1.SmartFake implements _i2.Cotization {
  _FakeCotization_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_1 extends _i1.SmartFake
    implements _i3.SharedPreferences {
  _FakeSharedPreferences_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DomainCotizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDomainCotizationService extends _i1.Mock
    implements _i2.DomainCotizationService {
  MockDomainCotizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Cotization>> all() => (super.noSuchMethod(
        Invocation.method(
          #all,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Cotization>>.value(<_i2.Cotization>[]),
      ) as _i4.Future<List<_i2.Cotization>>);
  @override
  _i4.Future<int> delete(_i2.Cotization? cotization) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [cotization],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<_i2.Cotization> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Cotization>.value(_FakeCotization_0(
          this,
          Invocation.method(
            #findById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Cotization>);
  @override
  _i4.Future<_i2.Cotization> save(_i2.Cotization? cotization) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [cotization],
        ),
        returnValue: _i4.Future<_i2.Cotization>.value(_FakeCotization_0(
          this,
          Invocation.method(
            #save,
            [cotization],
          ),
        )),
      ) as _i4.Future<_i2.Cotization>);
  @override
  _i4.Future<_i2.Cotization> update(_i2.Cotization? cotization) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cotization],
        ),
        returnValue: _i4.Future<_i2.Cotization>.value(_FakeCotization_0(
          this,
          Invocation.method(
            #update,
            [cotization],
          ),
        )),
      ) as _i4.Future<_i2.Cotization>);
}

/// A class which mocks [SharedPreferencesCacheCotizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesCacheCotizationService extends _i1.Mock
    implements _i5.SharedPreferencesCacheCotizationService {
  MockSharedPreferencesCacheCotizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SharedPreferences get prefs => (super.noSuchMethod(
        Invocation.getter(#prefs),
        returnValue: _FakeSharedPreferences_1(
          this,
          Invocation.getter(#prefs),
        ),
      ) as _i3.SharedPreferences);
  @override
  String get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: '',
      ) as String);
  @override
  set key(String? _key) => super.noSuchMethod(
        Invocation.setter(
          #key,
          _key,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<List<_i2.Cotization>> all() => (super.noSuchMethod(
        Invocation.method(
          #all,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Cotization>>.value(<_i2.Cotization>[]),
      ) as _i4.Future<List<_i2.Cotization>>);
  @override
  void setCotizations(List<_i2.Cotization>? cotizations) => super.noSuchMethod(
        Invocation.method(
          #setCotizations,
          [cotizations],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<int> delete(_i2.Cotization? cotization) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [cotization],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<_i2.Cotization> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Cotization>.value(_FakeCotization_0(
          this,
          Invocation.method(
            #findById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Cotization>);
  @override
  _i4.Future<_i2.Cotization> save(_i2.Cotization? cotization) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [cotization],
        ),
        returnValue: _i4.Future<_i2.Cotization>.value(_FakeCotization_0(
          this,
          Invocation.method(
            #save,
            [cotization],
          ),
        )),
      ) as _i4.Future<_i2.Cotization>);
  @override
  _i4.Future<_i2.Cotization> update(_i2.Cotization? cotization) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cotization],
        ),
        returnValue: _i4.Future<_i2.Cotization>.value(_FakeCotization_0(
          this,
          Invocation.method(
            #update,
            [cotization],
          ),
        )),
      ) as _i4.Future<_i2.Cotization>);
}

/// A class which mocks [QueryCotizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryCotizationService extends _i1.Mock
    implements _i2.QueryCotizationService {
  MockQueryCotizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Cotization> orderByLastUpdated(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderByLastUpdated,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> orderByName(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderByName,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> orderByCreateAt(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderByCreateAt,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> orderByPrice(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderByPrice,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> getOnlyWithTax(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlyWithTax,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> getOnlyWithoutTax(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlyWithoutTax,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> getOnlyFinished(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlyFinished,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> getOnlyNotFinished(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlyNotFinished,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> getOnlyNotDeleted(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlyNotDeleted,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> getOnlyDeleted(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlyDeleted,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> getOnlyAccounts(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlyAccounts,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
  @override
  List<_i2.Cotization> getOnlyNotAccounts(
          {required List<_i2.Cotization>? cotizations}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlyNotAccounts,
          [],
          {#cotizations: cotizations},
        ),
        returnValue: <_i2.Cotization>[],
      ) as List<_i2.Cotization>);
}
