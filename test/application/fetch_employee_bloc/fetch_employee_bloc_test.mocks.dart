// Mocks generated by Mockito 5.3.2 from annotations
// in cotizacion_dm/test/application/fetch_employee_bloc/fetch_employee_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cotizacion_dm/core/domain/employee/employee.dart' as _i2;
import 'package:cotizacion_dm/core/infrastructure/configuration/cache/employee/cache_employee_service.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEmployee_0 extends _i1.SmartFake implements _i2.Employee {
  _FakeEmployee_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_1 extends _i1.SmartFake
    implements _i3.SharedPreferences {
  _FakeSharedPreferences_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DomainEmployeeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDomainEmployeeService extends _i1.Mock
    implements _i2.DomainEmployeeService {
  MockDomainEmployeeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Employee>> all() => (super.noSuchMethod(
        Invocation.method(
          #all,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Employee>>.value(<_i2.Employee>[]),
      ) as _i4.Future<List<_i2.Employee>>);
  @override
  _i4.Future<int> delete(_i2.Employee? employee) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [employee],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<_i2.Employee> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Employee>.value(_FakeEmployee_0(
          this,
          Invocation.method(
            #findById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Employee>);
  @override
  _i4.Future<_i2.Employee> save(_i2.Employee? employee) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [employee],
        ),
        returnValue: _i4.Future<_i2.Employee>.value(_FakeEmployee_0(
          this,
          Invocation.method(
            #save,
            [employee],
          ),
        )),
      ) as _i4.Future<_i2.Employee>);
  @override
  _i4.Future<_i2.Employee> update(_i2.Employee? employee) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [employee],
        ),
        returnValue: _i4.Future<_i2.Employee>.value(_FakeEmployee_0(
          this,
          Invocation.method(
            #update,
            [employee],
          ),
        )),
      ) as _i4.Future<_i2.Employee>);
}

/// A class which mocks [SharedPreferencesCacheEmployeeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesCacheEmployeeService extends _i1.Mock
    implements _i5.SharedPreferencesCacheEmployeeService {
  MockSharedPreferencesCacheEmployeeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SharedPreferences get prefs => (super.noSuchMethod(
        Invocation.getter(#prefs),
        returnValue: _FakeSharedPreferences_1(
          this,
          Invocation.getter(#prefs),
        ),
      ) as _i3.SharedPreferences);
  @override
  String get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: '',
      ) as String);
  @override
  set key(String? _key) => super.noSuchMethod(
        Invocation.setter(
          #key,
          _key,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<List<_i2.Employee>> all() => (super.noSuchMethod(
        Invocation.method(
          #all,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Employee>>.value(<_i2.Employee>[]),
      ) as _i4.Future<List<_i2.Employee>>);
  @override
  void setEmployees(List<_i2.Employee>? employees) => super.noSuchMethod(
        Invocation.method(
          #setEmployees,
          [employees],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i2.Employee> save(_i2.Employee? employee) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [employee],
        ),
        returnValue: _i4.Future<_i2.Employee>.value(_FakeEmployee_0(
          this,
          Invocation.method(
            #save,
            [employee],
          ),
        )),
      ) as _i4.Future<_i2.Employee>);
  @override
  void clearAll() => super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<int> delete(_i2.Employee? employee) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [employee],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<_i2.Employee> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Employee>.value(_FakeEmployee_0(
          this,
          Invocation.method(
            #findById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Employee>);
  @override
  _i4.Future<_i2.Employee> update(_i2.Employee? employee) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [employee],
        ),
        returnValue: _i4.Future<_i2.Employee>.value(_FakeEmployee_0(
          this,
          Invocation.method(
            #update,
            [employee],
          ),
        )),
      ) as _i4.Future<_i2.Employee>);
}
